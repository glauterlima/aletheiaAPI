package br.jus.trf1.aletheia.repository.demanda;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.util.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;


import br.jus.trf1.aletheia.model.Demanda;
import br.jus.trf1.aletheia.model.Demanda_;
import br.jus.trf1.aletheia.repository.filter.DemandaFilter;

public class DemandaRepositoryImpl implements DemandaRepositoryQuery{

	@PersistenceContext
	private EntityManager manager;
	
	@Override
	public Page<Demanda> filtrar(DemandaFilter demandaFilter, Pageable pageable) {
		
		CriteriaBuilder builder = manager.getCriteriaBuilder();
		CriteriaQuery<Demanda> criteria = builder.createQuery(Demanda.class);
		Root<Demanda> root = criteria.from(Demanda.class);
		
		Predicate[] predicates = criarRestricoes(demandaFilter, builder, root);
		criteria.where(predicates);
		
		TypedQuery<Demanda> query = manager.createQuery(criteria);
		adicionarRestricoesDePaginacao(query, pageable);
	
		return new PageImpl<>(query.getResultList(), pageable, total(demandaFilter));
	}

	

	private Predicate[] criarRestricoes(DemandaFilter demandaFilter, CriteriaBuilder builder, Root<Demanda> root) {
		
		List<Predicate> predicates = new ArrayList<>();
		
		if(!StringUtils.isEmpty(demandaFilter.getNome())) {
			predicates.add(builder.like(
					builder.lower(root.get(Demanda_.nome)),"%" + demandaFilter.getNome().toLowerCase() + "%"));
		}
		
		
		if(demandaFilter.getData() != null) {
			predicates.add(
					builder.equal(root.get(Demanda_.data), demandaFilter.getData()));	
		}
		
		return predicates.toArray(new Predicate[predicates.size()]);
	}
	
	private void adicionarRestricoesDePaginacao(TypedQuery<Demanda> query, Pageable pageable) {
		int paginaAtual = pageable.getPageNumber();
		int totalRegistrosPorPagina = pageable.getPageSize();
		int primeiroRegistroDaPagina = paginaAtual * totalRegistrosPorPagina;
		
		query.setFirstResult(primeiroRegistroDaPagina);
		query.setMaxResults(totalRegistrosPorPagina);
		
	}
	

	private Long total(DemandaFilter demandaFilter) {
		CriteriaBuilder builder = manager.getCriteriaBuilder();
		CriteriaQuery<Long> criteria = builder.createQuery(Long.class);
		Root<Demanda> root = criteria.from(Demanda.class);
		
		Predicate[] predicates = criarRestricoes(demandaFilter, builder, root);
		criteria.where(predicates);
		
		criteria.select(builder.count(root));
		
		return manager.createQuery(criteria).getSingleResult();
	}



}
