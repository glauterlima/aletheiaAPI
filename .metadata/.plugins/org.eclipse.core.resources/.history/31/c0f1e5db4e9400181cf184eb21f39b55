package br.jus.trf1.aletheia.repository.demanda;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import br.jus.trf1.aletheia.model.Demanda;
import br.jus.trf1.aletheia.repository.filter.DemandaFilter;

public class DemandaRepositoryImpl implements DemandaRepositoryQuery{

	@PersistenceContext
	private EntityManager manager;
	
	@Override
	public List<Demanda> filtrar(DemandaFilter demandaFilter) {
		
		CriteriaBuilder builder = manager.getCriteriaBuilder();
		CriteriaQuery<Demanda> criteria = builder.createQuery(Demanda.class);
		Root<Demanda> root = criteria.from(Demanda.class);
		
		//criar as restrições
		Predicate[] predicates = criarRestricoes(demandaFilter, builder, root);
		criteria.where(predicates);
		
		TypedQuery<Demanda> query = manager.createQuery(criteria);
	
		return query.getResultList();
	}

	private Predicate[] criarRestricoes(DemandaFilter demandaFilter, CriteriaBuilder builder, Root<Demanda> root) {
		
		List<Predicate> predicates = new ArrayList<>();
		
		if(demandaFilter.getNome() != null) {
			//predicates.add(e)
		}
		
		if(demandaFilter.getData() != null) {
			//predicates.add(e)
		}
		
		if(demandaFilter.getSistema() != null) {
			//predicates.add(e)
		}
		
		if(demandaFilter.getLote() != null) {
			//predicates.add(e)
		}
		return predicates.toArray(new Predicate[predicates.size()]);
	}

}
